// Generated by CoffeeScript 1.6.2
(function() {
  var DEFAULT_PORT, Markup, Server, chokidar, express, fs, isRegExp, isString, jade, path, util,
    __hasProp = {}.hasOwnProperty;

  express = require('express');

  path = require('path');

  util = require('util');

  fs = require('fs');

  jade = require('jade');

  chokidar = require('chokidar');

  module.exports.DEFAULT_PORT = DEFAULT_PORT = 7777;

  isString = function(obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
  };

  isRegExp = function(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
  };

  Server = (function() {
    function Server(markup) {
      var app,
        _this = this;

      this.app = app = express();
      if (isString(markup)) {
        markup = new Markup(markup);
      }
      app.set('views', __dirname + '/views');
      app.set('view engine', 'jade');
      app.use(express.bodyParser());
      app.use('/static', express["static"](__dirname + '/static'));
      app.configure('development', function() {
        app.use(express.errorHandler({
          dumpException: true,
          showStack: true
        }));
        return app.set('view options', {
          pretty: true
        });
      });
      app.configure('production', function() {
        return app.use(express.errorHandler());
      });
      app.get('/', function(req, res) {
        return res.render('index');
      });
      app.del('/', function(req, res) {
        res.send('bye');
        return _this.close();
      });
      app.get('/update-event', function(req, res) {
        req.socket.setTimeout(Infinity);
        res.set({
          'Content-Type': 'text/event-stream',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive'
        });
        markup.watch(function(err) {
          if (err) {
            return console.error(err);
          } else {
            console.log("Detected file change in " + (path.basename(markup.filename)));
            return res.write('data: updated\n\n');
          }
        });
        return res.on('close', function() {
          return markup.unwatch();
        });
      });
      app.get('/content', function(req, res) {
        return markup.html(function(err, html) {
          if (err) {
            console.error(err);
            throw err;
          }
          return res.json({
            title: markup.title,
            html: html
          });
        });
      });
    }

    Server.prototype.listen = function(port) {
      if (port == null) {
        port = DEFAULT_PORT;
      }
      console.log("Server listening at " + port);
      return this.server = this.app.listen(port);
    };

    Server.prototype.close = function() {
      return this.server.close();
    };

    return Server;

  })();

  module.exports.Server = Server;

  Markup = (function() {
    function Markup(filename) {
      if (!fs.existsSync(filename)) {
        throw new Error("input file '" + filename + "' doesn't exist");
      }
      this.filename = filename = path.resolve(process.cwd(), filename);
      this.title = "" + (path.basename(filename)) + " - " + (path.dirname(filename));
    }

    Markup.prototype.html = function(callback) {
      var detect, found, name, options, render, _ref,
        _this = this;

      found = false;
      _ref = Markup.ftdetects;
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        detect = _ref[name];
        if ((isRegExp(detect) && detect.test(this.filename)) || detect(this.filename)) {
          options = Markup.rendererOptions[name];
          render = Markup.renderers[name];
          fs.readFile(this.filename, function(err, data) {
            if (err) {
              return callback(err, null);
            } else {
              data = _this._stripYAMLFrontmatter(data);
              return callback(null, render(data));
            }
          });
          found = true;
        }
      }
      if (!found) {
        return callback(new Error('renderer not found'), null);
      }
    };

    Markup.prototype["export"] = function() {
      var render;

      if (this.exportTemplate == null) {
        this.exportTemplate = fs.readFileSync(__dirname + '/views/export.jade');
      }
      render = jade.compile(this.exportTemplate);
      return render(this.html());
    };

    Markup.prototype.watch = function(callback) {
      var watcher,
        _this = this;

      this.watcher = watcher = chokidar.watch(this.filename, {
        persistent: true
      });
      return watcher.on('change', function() {
        return callback();
      }).on('unlink', function() {
        return callback(new Error("File " + _this.filename + " has been removed"));
      }).on('error', callback);
    };

    Markup.prototype.unwatch = function() {
      return this.watcher.close();
    };

    Markup.prototype._stripYAMLFrontmatter = function(source) {
      var content, match;

      source = source.toString();
      if (/^-{3}\n/.test(source)) {
        content = source.split('---\n');
        content.shift();
        if (content.length >= 2) {
          match = /(?:^|\n)title:\s*(.+)/i.exec(content.shift());
          if (match) {
            this.title = match[1];
          }
          return content.join('---\n');
        }
      }
      return source;
    };

    return Markup;

  })();

  Markup.ftdetects = {
    'markdown': /\.(markdown|md|mdown|mkd|mkdn)$/
  };

  Markup.renderers = {
    'markdown': require('./markdown').render
  };

  Markup.rendererOptions = {};

  module.exports.Markup = Markup;

}).call(this);
